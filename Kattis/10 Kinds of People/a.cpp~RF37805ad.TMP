#include <iostream>
#include <vector>
#include <string>

using namespace std;
vector<string> v;
int r, c, n;
int r1, c1, r2, c2;
bool visited[1005][1005];


bool dfs(vector<string> v, char x, int r1, int c1) {
  // recursively search left right up and down
  // if char changes to another value, break
  // if char is same, dfs that square

  // left //
  if (r1 < 0 || c1 < 0 || r1 >= r || c1 >= c || v[r1][c1] != x || visited[r1][c1]) return false;
  visited[r1][c1] = true;
  if (r1 == r2 && c1 == c2) return true;

  // if r2, c2 is reached, output true

  return dfs(v, x, r1, c1 - 1) || dfs(v, x, r1, c1 + 1) ||
         dfs(v, x, r1 - 1, c1) || dfs(v, x, r1 + 1, c1);
}


int main() {

  ios::sync_with_stdio(false);
  cin.tie(0);

  cin >> r >> c;
  for (int i = 0; i < r; ++i) {
    string s;
    cin >> s;
    v[i] = s;
  }

  cin >> n;
  for (int i = 0; i < n; ++i) {
    visited[r][c];
    cin >> r1 >> c1 >> r2 >> c2;
    r1--, c1--, r2--, c2--;
    char x = v[r1][c1];
    if (dfs) {
      if (x == '0') cout << "binary\n";
      else if (x == '1') cout << "decimal\n";
    }
    else cout << "neither\n";
}




  return 0;

}
